mod gameplay
mod gameplay::*
mod input::{PlayerInput}

mod math::{
    Rect,
    Position,
    Size,
}

const SCREEN_HEIGHT = 180
const SCREEN_HEIGHT_F = 180.float()
const SCREEN_WIDTH = 320
const SCREEN_WIDTH_F = 320.float()
const ENEMY_MARGIN = 20
const SHIP_Y_MARGIN = 20.0
const SHIP_X_MARGIN = 20.0
const MAGNITUDE = 8.0
// const STARTING_POS = Position::new(20.0, 80.0)
const FIRE_COOLDOWN = 25

enum Faction {
    Player,
    Enemy,
}


enum ShotType {
    Tiny,
    Magentas,
}

struct Shot {
    x: Float,
    y: Float,
    direction: Position,
    tick: Int,
    faction: Faction,
    type: ShotType,
}


struct Player {
    fire: Bool,
    fire_cooldown: Int,
    assigned_ship_index: SparseId?,
    direction: Position,
}

struct Ship {
    rect: Rect,
    direction: Position,
}

enum EnemyType {
    Alan,
    BonBon,
    Lips,
}

impl EnemyType {
    fn is_cool(self) -> Bool {
        match self {
            Alan -> false,
            BonBon -> true,
            Lips -> false,
        }
    }
}

struct Waypoints {
    points: [Position; 8],
}

enum FormationMovement {
    Waypoints(Waypoints),
    Sine,
}

struct Formation {
    movement: FormationMovement,
}


struct Brain {
    time_until_attack: Int,
}



struct Enemy {
    rect: Rect,
    //base_y: Float,
    direction: Float,
    enemy: EnemyType,
    formation: Int,
    //time: Int,
    could_be_together: {
        time: Int,
        base_y: Float,
    },
    brain: Brain,
}

enum ExplosionType {
    Fire, // TODO: add more types
}

struct Explosion {
    pos: Position,
    tick: Int,
    type: ExplosionType,
}

struct ScoreBonus {
    pos: Position,
    tick: Int,
    score: Int,
}

struct BonusItem {
    pos: Position,
}

struct ShipAction {
    move: (Float, Float),
    fire: Bool,
    rockets: Bool,
}


enum PlayerAction {
    Nothing,
    ShipAction(ShipAction),
}


struct Logic {
    tick_count: Int, /// how many ticks have passed
    ships: Sparse<Ship; 4>,
    shots: Sparse<Shot; 64>,
    enemies: Sparse<Enemy; 64>,
    explosions: Sparse<Explosion; 64>,
    score_bonus: Sparse<ScoreBonus; 64>,
    bonus_items: Sparse<BonusItem; 8>,
    players: [Int: Player; 4],
    formations: [Int: Formation; 8],
    cooldown_settings: [Int; 3], // just to test arrays
    score: Int,
    formation_id: Int,
    enemy_type: EnemyType,
    prng_x: Int,
}

struct Prnd

impl Prnd {
    fn random_range(value: Float, min: Int, max: Int) -> Int {
        min + (value.rnd() % (max - min).float()).floor()
    }

    fn random_range_int(value: Int, min: Int, max: Int) -> Int {
        min + (value.rnd() % (max - min + 1))
    }
}

impl Brain {
    fn think(mut self, rand_influence: Int) -> Bool {
        if self.time_until_attack > 0 {
            self.time_until_attack -= 1
            false
        } else {
            self.time_until_attack = Prnd::random_range_int(rand_influence, 200, 400)
            true
        }
    }
}

impl Logic {
    fn new() -> Logic {
        player = Player {
            fire: false,
            fire_cooldown: 0,
            assigned_ship_index: none,
            direction: Position { x: 0.0, y: 0.0 }
        }

        Logic {
            tick_count: 0,
            shots: [],
            enemies: [],
            explosions: [],
            score_bonus: [],
            bonus_items: [],
            players: [ 0: player ],
            ships: [],
            cooldown_settings: [ 10, FIRE_COOLDOWN, 30 ],
            formations: [ : ],
            score: 0,
            formation_id: 0,
            enemy_type: EnemyType::Alan,
            prng_x: 0,
        }
    }


    fn has_enemies_in_formation(self, formation: Int) -> Bool {
        true // self.enemies.any(| enemy | enemy.formation == formation)
    }

    fn remove_enemy(mut self, id: SparseId) -> Bool {
        enemy = self.enemies[id]

        _ = self.enemies.remove(id)

        if self.formations.has(enemy.formation) && !self.has_enemies_in_formation(enemy.formation) {
            self.formations.remove(enemy.formation)
            true
        } else {
            false
        }
    }

    fn check_shots_vs_enemies(mut self) {
        //self.shots.for(| shot_id, shot | {
        for shot_id, shot in self.shots {
            if shot.faction == Faction::Player {
                for enemy_id, enemy in self.enemies {
                    shot_rect = Rect { pos: Position { x: shot.x, y: shot.y }, size: Size { width: 1.0, height: 2.0 } }
                    if enemy.rect.intersects(shot_rect) {
                        self.shots.remove(shot_id)
                        was_last_in_formation = self.remove_enemy(enemy_id)
                        score_for_enemy = 10
                        _ = self.explosions.add(Explosion { pos: enemy.rect.pos, tick: 0, type: ExplosionType::Fire })
                        _ = self.score_bonus.add(ScoreBonus { pos: enemy.rect.pos, tick: 0, score: score_for_enemy })
                        self.score += score_for_enemy
                        if was_last_in_formation {
                            enemy_middle = enemy.rect.pos.add(Position { x: 4.0, y: 4.0 })
                            _ = self.bonus_items.add(BonusItem { pos: enemy_middle } )
                        }
                    }
                }
            }
        }
    }

    // TODO: this too complex and should be simplified
    fn check_shots_vs_ships(mut self) {
        self.shots.while (| shot_id, shot | {
            if shot.faction != Faction::Enemy {
                true
            }
            else
            {
                self.ships.while (| ship_id, ship | {
                    shot_pos = Position { x: shot.x, y: shot.y }
                    if ship.rect.pos.distance(shot_pos) > 8.0 {
                        true
                    } else {
                        self.shots.remove(shot_id)
                        self.ships.remove(ship_id)

/*
                        self.players.while(| mut player | {
                            when found_index = player.assigned_ship_index {
                                if found_index == ship_id {
                                    player.assigned_ship_index = none
                                    false
                                } else {
                                    true
                                }
                            } else {
                              true
                            }
                        })
*/

                        _ = self.explosions.add(Explosion { pos: ship.rect.pos, tick: 0, type: ExplosionType::Fire })

                        false
                    }
                })
               false
            }
        })
    }


    fn check_bonus_vs_ships(mut self) {
        for bonus_item_id, bonus_item in self.bonus_items {
            bonus_item_rect = Rect {
                pos: Position { x: bonus_item.pos.x, y: bonus_item.pos.y },
                size: Size { width: 10.0, height: 10.0 },
            }

            self.ships.for(|ship| {
                ship_middle = Position { x: ship.rect.pos.x + 8.0, y: ship.rect.pos.y + 8.0 }
                bonus_middle = Position { x: bonus_item_rect.pos.x + 5.0, y: bonus_item_rect.pos.y + 5.0 }

                distance = bonus_middle.distance(ship_middle)

                if distance <= 9.0 {
                  self.score += 100
                  _ = self.score_bonus.add(ScoreBonus { pos: bonus_item.pos, tick: 0, score: 100 })
                  self.bonus_items.remove(bonus_item_id)
                }
            })
        }
    }

    fn tick_explosions(mut self) {
        for explosion_id, mut explosion in self.explosions {
            // This is just to show off the guard expression syntax
            | explosion.tick >= 30 -> {
                self.explosions.remove(explosion_id)
                }
            | _ -> {
                explosion.tick += 1
                explosion.pos.x += 0.9
            }
        }
    }

    fn tick_score_bonus(mut self) {
        for bonus_id, mut bonus in self.score_bonus {
            // This is just to show that the scope is not needed for if statements
            // But it is strongly recommended with '{' '}' for easier reading
            if bonus.tick >= 30
                self.score_bonus.remove(bonus_id)
             else {
                bonus.tick += 1
            }
        }
    }

    fn tick_bonus_items(mut self) {
        for bonus_id, mut bonus_item in self.bonus_items {
            if bonus_item.pos.x < -30.0 {
                self.bonus_items.remove(bonus_id)
            } else {
                bonus_item.pos.x -= 0.6
            }
        }
    }

    fn check_player_input(mut self) {
        for mut player in self.players {
            // HACK: REMOVE THIS LATER
            player.fire = true
            if player.fire && !player.assigned_ship_index {
                print('player pressed fire, they have no ship, lets assign one')
                ship2 = Ship {
                    rect: Rect {
                        pos: Position { x: 20.0, y: 89.0 },
                        size: Size { width: 16.0, height: 16.0 },
                    },
                    direction: Position { x: 0.0, y: 0.0 },
                }

                ship_id = self.ships.add(ship2) // BUG: Didn't check type
                print('player assigned to ship: {ship_id}')
                player.assigned_ship_index = ship_id
            }

            when ship_index = player.assigned_ship_index {
                ship = self.ships[ship_index]
                if player.fire && player.fire_cooldown == 0 {
                    player.fire_cooldown = self.cooldown_settings[ 1 ]
                    _ = self.shots.add(Shot {
                        x: ship.rect.pos.x + 12.0,
                        y: ship.rect.pos.y + 4.0,
                        direction: Position { x: 8.0, y: 0.0 },
                        tick: 0,
                        faction: Faction::Player,
                        type: ShotType::Tiny,
                    })
                }
            }
        }
    }

    fn closest_ship(self) -> Ship? {
        /*
        self.ships.find(| ship| {
            true  //HACK: just return the first ship
        })
        */
        none
    }

    fn enemies_think(mut self) {
        for id, mut enemy in self.enemies {
            want_to_attack = enemy.brain.think(enemy.could_be_together.time + self.tick_count + self.prng_x)
            if want_to_attack {
                target_ship = self.closest_ship() // BUG: didn't check return value
                when target_ship {
                    direction_to_ship = target_ship.rect.pos.sub(enemy.rect.pos).normalize()

                    initial_projectile_pos = enemy.rect.pos.add(direction_to_ship.scale(4.0))

                    _ = self.shots.add(Shot {
                            x: initial_projectile_pos.x,
                            y: initial_projectile_pos.y,
                            direction: direction_to_ship.scale(1.5),
                            tick: 0,
                            faction: Faction::Enemy,
                            type: ShotType::Magentas,
                        })
                }
            }
        }
    }

    fn next_enemy_type(enemy_type: EnemyType) -> EnemyType {
        match enemy_type {
            Alan -> EnemyType::BonBon,
            BonBon -> EnemyType::Lips,
            Lips -> EnemyType::Alan,
        }
    }

    fn next_formation_enemy_type(mut self) -> EnemyType {
        self.enemy_type = Logic::next_enemy_type(self.enemy_type)
        self.enemy_type
    }

    fn create_formation(mut self) {
        self.formation_id += 1
        self.formation_id %= self.formations.capacity()
        formation_id = self.formation_id

        enemy_type = self.next_formation_enemy_type()

        self.formations[formation_id] = Formation { movement: FormationMovement::Sine }

        count_in_formation = Prnd::random_range_int(self.prng_x + self.tick_count, 3, 5)

        //print('creating formation {formation_id} with {count_in_formation} enemies of type {enemy_type}')
        for offset_index in 0..count_in_formation {
            random_y = Prnd::random_range_int(self.tick_count, ENEMY_MARGIN, SCREEN_HEIGHT - ENEMY_MARGIN)
            x_offset = offset_index * 32
            rect = Rect {
                pos: Position { x: SCREEN_WIDTH.float() + 32.0 + x_offset.float(), y: random_y.float() },
                size: Size { width: 16.0, height: 16.0 }
            }

            direction =
                | enemy_type.is_cool() -> -1.8
                | _ -> -1.0

            //print('creating enemy {enemy_type} at {rect.pos.x}, {rect.pos.y} with direction {direction} in formation {formation_id}')
            new_enemy_id = self.enemies.add( {
                rect: rect,
                could_be_together: { time: x_offset, base_y: rect.pos.y },
                //base_y: rect.pos.y,
                enemy: enemy_type,
                direction: direction,
                formation: formation_id,
                //time: x_offset,
                brain: Brain { time_until_attack: Prnd::random_range_int(self.prng_x + self.tick_count + x_offset, 100, 500) },
            })
            //print('enemy {new_enemy_id} created count: {self.enemies.len()}')
        }
    }


    fn players_fire_cooldown(mut self) {
        for mut player in self.players {
            if player.fire_cooldown > 0 {
                player.fire_cooldown -= 1
            }
        }
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn change_cooldown_setting(mut settings: Int, v: Int) {
        settings = v
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn move_in_y_with_direction(mut position: Position, direction: Float) {
        position.y += direction
        position.y = position.y.clamp(SHIP_Y_MARGIN, SCREEN_HEIGHT_F - SHIP_Y_MARGIN)
    }

    fn move_in_x_with_direction(mut position: Position, direction: Float) {
        position.x += direction * 1.3
        position.x = position.x.clamp(SHIP_X_MARGIN, SCREEN_WIDTH_F - SHIP_X_MARGIN)
    }

    fn move_ships(mut self) {
        for mut ship in self.ships {
            Logic::move_in_y_with_direction(&ship.rect.pos, ship.direction.y)
            Logic::move_in_x_with_direction(&ship.rect.pos, ship.direction.x)
            self.prng_x = ship.rect.pos.x.floor()
        }
    }

    fn player_input_to_ship_direction(mut self, player: Player) {
        when ship_index = player.assigned_ship_index {
            mut ship = self.ships[ship_index]
            ship.direction = player.direction
            self.ships[ship_index] = ship
        } else if player.fire {
            // print('ship not assigned yet, press fire to assign')
        } else {
            // print('ship not assigned yet, press fire to assign')
        }
    }

    /// Called by the mangrove engine every logic tick
    #[host_call]
    fn tick(mut self) {
        self.tick_count += 1

        // Input from players to ships
        for player in self.players {
            self.player_input_to_ship_direction(player)
        }

        self.move_ships()


        // print('cooldown: {cooldown ?? -1} is the value \n\xF0\x9F\x90\x8A\u(1F40A)NEXT LINE (🐊)')

        if self.tick_count % 257 == 0 {
            self.create_formation()
        }

        // Update enemies
        // Not a needed `with` statement, but should verify that it works correctly
        with mut formations=&self.formations, mut enemies = &self.enemies {
            mut enemy_ids_to_remove: Vec<SparseId; 20> = []
            for id, mut enemy in enemies {
                enemy.rect.pos.x += enemy.direction * 1.0
                enemy.could_be_together.time += 1
                sway_time = enemy.could_be_together.time.float() * 0.02
                sway_angle = sway_time * 6.28
                y = sway_angle.cos() * MAGNITUDE
                enemy.rect.pos.y = enemy.could_be_together.base_y + y

                if enemy.rect.pos.x < -32.0 {
                    //print('enemy {id} is out of screen, schedule removal and information about the formation {enemy.formation}')
                    if formations.has(enemy.formation) {
                        formations.remove(enemy.formation)
                    }
                    enemy_ids_to_remove.push(id)
                }
            }

            for id in enemy_ids_to_remove {
                enemies.remove(id)
            }
        }


        // Update shots
        with mut shots = &self.shots {
            screen_rect = Rect {
                pos: Position {
                    x: 0.0,
                    y: 10.0,
                },
                size: Size {
                    width: SCREEN_WIDTH_F,
                    height: SCREEN_HEIGHT_F,
                },
            }
            for shot_id, mut shot in shots {
                shot.x += shot.direction.x
                shot.y += shot.direction.y
                if !screen_rect.contains_xy(shot.x, shot.y) {
                    shots.remove(shot_id)
                }
                shot.tick += 1
            }
        }

        self.tick_explosions()
        self.tick_score_bonus()
        self.check_bonus_vs_ships()
        self.tick_bonus_items()
        self.enemies_think()
        self.check_shots_vs_enemies()
        //self.check_shots_vs_ships()
        self.check_player_input()
        self.players_fire_cooldown()
    }

    fn set_player_input_fire(mut self, player_id: Int, fire: Bool) {
        self.players[player_id].fire = fire
        Logic::change_cooldown_setting(&self.cooldown_settings[ 1 ], 20)
    }

    #[host_call]
	fn input_changed(mut self, input: PlayerInput) {
    }

    fn some_guard() -> Bool {
        false
    }
}

/// Called by the mangrove engine at startup
fn main() -> Logic {
    Logic::new()
}
